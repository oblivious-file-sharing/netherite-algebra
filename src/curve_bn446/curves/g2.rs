use ark_ec::models::{ModelParameters, SWModelParameters};
use ark_ff::{field_new, Zero};

use crate::curve_bn446::{Fq, Fq2, Fr};

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq2;
    type ScalarField = Fr;
}

impl SWModelParameters for Parameters {
    /// COEFF_A = [0, 0]
    #[rustfmt::skip]
    const COEFF_A: Fq2 = field_new!(Fq2, field_new!(Fq, "0"), field_new!(Fq, "0"));

    /// COEFF_B = 257 / xi
    ///         = -u + 16
    /// where xi = (u + 16) is an element in Fq2 is not square (i.e., quadratic nonresidue) and is not a cube
    #[rustfmt::skip]
    const COEFF_B: Fq2 = field_new!(Fq2,
        field_new!(Fq, "16"),
        field_new!(Fq, "-1"),
    );

    /// COFACTOR = (36 * X^4) + (36 * X^3) + (30 * X^2) + 6*X + 1
    ///          = 102211695604069718983520304652693874995639508460729604902280098199802846361528844466809084151324502007903115563866166482562610972590189
    /// For this curve, X = 2^110 + 2^36 + 1 = 1298074214633706907132692801781761
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        21852793602157u64,
        25543854136582656u64,
        9727775195308228608u64,
        104689827840u64,
        14843406975516u64,
        10133099161767936u64,
        2594073385365405696u64,
    ];

    /// COFACTOR_INV = COFACTOR^{-1} mod r
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = field_new!(Fr, "51105847802034859491760152326346976868332800324579441162432910036007228880689248164925884407083870920310630593358164294382371597189209");

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G2_GENERATOR_X, G2_GENERATOR_Y);

    #[inline(always)]
    fn mul_by_a(_: &Self::BaseField) -> Self::BaseField {
        Self::BaseField::zero()
    }
}

#[rustfmt::skip]
pub const G2_GENERATOR_X: Fq2 = field_new!(Fq2, G2_GENERATOR_X_C0, G2_GENERATOR_X_C1);
#[rustfmt::skip]
pub const G2_GENERATOR_Y: Fq2 = field_new!(Fq2, G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1);

/// G2_GENERATOR_X_C0 =
/// 85142260631884102895388339614762314144825369218890297254284683466782830822760617310574034677566393397116290773472888673103974672332125
#[rustfmt::skip]
pub const G2_GENERATOR_X_C0: Fq = field_new!(Fq, "85142260631884102895388339614762314144825369218890297254284683466782830822760617310574034677566393397116290773472888673103974672332125");

/// G2_GENERATOR_X_C1 =
/// 13624121520693402694869247549325415327429678102653614366658596976557064787277757833563346511278253150174383445196610853431473154084306
#[rustfmt::skip]
pub const G2_GENERATOR_X_C1: Fq = field_new!(Fq, "13624121520693402694869247549325415327429678102653614366658596976557064787277757833563346511278253150174383445196610853431473154084306");

/// G2_GENERATOR_Y_C0 =
/// 53992148436929929169980765538525044367506366351703235112018625292755515152017461023963555674557168458164802110163884700944497817283639
#[rustfmt::skip]
pub const G2_GENERATOR_Y_C0: Fq = field_new!(Fq, "53992148436929929169980765538525044367506366351703235112018625292755515152017461023963555674557168458164802110163884700944497817283639");

/// G2_GENERATOR_Y_C1 =
/// 25903135691793535466168505034204196584414931530499827768648434697774784004909935324506230245456217262526876243239333744618131967282757
#[rustfmt::skip]
pub const G2_GENERATOR_Y_C1: Fq = field_new!(Fq, "25903135691793535466168505034204196584414931530499827768648434697774784004909935324506230245456217262526876243239333744618131967282757");

// We find this generator of the subgroup by firstly trying to find a generator (-u, 4) on the original curve and multiplying it with the cofactor
