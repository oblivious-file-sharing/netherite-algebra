use ark_ff::{biginteger::BigInteger448 as BigInteger, field_new, fields::*};

pub type Fq = Fp448<FqParameters>;

pub struct FqParameters;

impl Fp448Parameters for FqParameters {}
impl FftParameters for FqParameters {
    type BigInt = BigInteger;

    const TWO_ADICITY: u32 = 1;

    /// two_adic_root_of_unity = generator ^ r = 102211695604069718983520304652693874995639508460729604902280098199792736381528662976886082950231100101353700265360419596271313339023462
    /// Written as  two_adic_root_of_unity * r (in the Montgomery representation)
    ///           = 90854840536950861318838629333546465611474706998518778936750586417702602938831380488897612888085235250067080516617178836635905083573048
    #[rustfmt::skip]
    const TWO_ADIC_ROOT_OF_UNITY: BigInteger = BigInteger([
        168225279050552u64,
        197595433651593216u64,
        4035225267602456576u64,
        824633720836u64,
        118747255804128u64,
        81064793294143488u64,
        2305843009213693952u64,
    ]);
}
impl FpParameters for FqParameters {
    /// MODULUS = 102211695604069718983520304652693874995639508460729604902280098199792736381528662976886082950231100101353700265360419596271313339023463
    #[rustfmt::skip]
    const MODULUS: BigInteger = BigInteger([
        21028159881319u64,
        24699429206449152u64,
        9727775195305082880u64,
        103079215104u64,
        14843406975516u64,
        10133099161767936u64,
        2594073385365405696u64,
    ]);

    const MODULUS_BITS: u32 = 446;

    const CAPACITY: u32 = Self::MODULUS_BITS - 1;

    const REPR_SHAVE_BITS: u32 = 2;

    /// R = pow(2, 448) % MODULUS
    ///   = 11356855067118857664681675319147409384164801462210825965529511782090133442697282487988470062145864851286619748743240759635408255450415
    #[rustfmt::skip]
    const R: BigInteger = BigInteger([
        18446596876590382383u64,
        18273848069264407551u64,
        5692549927702626303u64,
        18446743352155045884u64,
        18446640169860723003u64,
        18375812379577176063u64,
        288230376151711743u64,
    ]);

    /// R2 = R * R % MODULUS
    ///    = 22713118617831208709320393974688942090415090362621460428711217095019732131795737685795579927413090226263955679116345985416547095433694
    #[rustfmt::skip]
    const R2: BigInteger = BigInteger([
        15226258013123662302u64,
        10862166246390342314u64,
        13776351249927989378u64,
        4091262347089019733u64,
        6442809140437287942u64,
        6919780807063966150u64,
        576445739961068170u64,
    ]);

    /// INV = (-MODULUS) ^ {-1} % pow(2, 64) = 595423277050246629
    const INV: u64 = 7770619218252063913u64;

    /// GENERATOR = 3   (smallest generator)
    /// Written as 3 * R (in the Montgomery representation)
    ///          = 34070565201356572994045025957442228152494404386632477896588535346270400328091847463965410186437594553859859246229722278906224766351245
    #[rustfmt::skip]
    const GENERATOR: BigInteger = BigInteger([
        18446302482352043917u64,
        17928056060374119423u64,
        17077649783107878911u64,
        18446741909046034420u64,
        18446432362163065779u64,
        18233948991312424959u64,
        864691128455135231u64,
    ]);

    /// (MODULUS - 1) / 2 =
    /// 51105847802034859491760152326346937497819754230364802451140049099896368190764331488443041475115550050676850132680209798135656669511731
    #[rustfmt::skip]
    const MODULUS_MINUS_ONE_DIV_TWO: BigInteger = BigInteger([
        10514079940659u64,
        12349714603224576u64,
        4863887597652541440u64,
        51539607552u64,
        7421703487758u64,
        5066549580883968u64,
        1297036692682702848u64,
    ]);

    // T and T_MINUS_ONE_DIV_TWO, where MODULUS - 1 = 2^s * t
    // Here, s = 1, or essentially with the minimal 2-arity

    /// T = (MODULUS - 1) / 2^s =
    /// 51105847802034859491760152326346937497819754230364802451140049099896368190764331488443041475115550050676850132680209798135656669511731
    #[rustfmt::skip]
    const T: BigInteger = BigInteger([
        10514079940659u64,
        12349714603224576u64,
        4863887597652541440u64,
        51539607552u64,
        7421703487758u64,
        5066549580883968u64,
        1297036692682702848u64,
    ]);

    /// (T - 1) / 2 =
    /// 25552923901017429745880076163173468748909877115182401225570024549948184095382165744221520737557775025338425066340104899067828334755865
    #[rustfmt::skip]
    const T_MINUS_ONE_DIV_TWO: BigInteger = BigInteger([
        5257039970329u64,
        6174857301612288u64,
        2431943798826270720u64,
        25769803776u64,
        3710851743879u64,
        2533274790441984u64,
        648518346341351424u64,
    ]);
}

#[allow(dead_code)]
pub const FQ_ONE: Fq = Fq::new(FqParameters::R);
#[allow(dead_code)]
pub const FQ_ZERO: Fq = Fq::new(BigInteger([0, 0, 0, 0, 0, 0, 0]));
#[allow(dead_code)]
pub const FQ_TWO: Fq = field_new!(Fq, "2");
